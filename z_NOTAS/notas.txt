1° entrega: 

2 rutas con Router. 
    /productos 
    /carrito 

puertos: 
    8080 para desarrollo 
    process.env.PORT para producción (glitch)

/productos: 
    get (/:id) -> devuelve un producto
        listar todos los productos
        (disponible para usuarios y administradores)
    
    post (/) incorporar productos (para administradores)
    put (/:id) actualizar 1 producto (para administradores)
    delete (/:id) eliminar 1 producto (para administradores)

/api/carritos: 
    post (/) crear carrito y devolver id (usuarios y administradores)
    delete (/:id) elimina id + borra carrito (usuarios y administradores)
    get (/:id/productos) me muestra todos los productos del listado (usuarios y administradores)
    post (/:id/productos) añadir producto x id al carrito (usuarios y administradores)
    delete (/:id/productos/:id_prod) eliminar producto x id del carrito (usuarios y administradores)

1  variable boolean para administrador (login)
si es true o false, me deja ver las rutas. 
mostrar error si no esta autorizado?

productos: 
    id 
    timestamp (Date.now())
    nombre
    descripcion 
    codigo 
    foto (url)
    precio 
    stock 

carrito: 
    id 
    timestamp
    productos {
        id 
        timestamp(producto) → Date.now()
        nombre
        descripcion
        codigo
        foto (url)
        precio
        stock
    }

persistencia: 
    file system
    productos y carrito

JSON : dialogo entre backend y front. 
el servidor no debe generar ninguna vista. 

si se busca una ruta q no esta en servidor, tirar error. 
ejemplo: 
    {
        "error": "-2",
        descripcion: 
            ruta (no implementada)
            metodo (no implementada)
    }

ECMAScript (
    router 
    logica de negocio/api 
    persistencia
)

----------------------------------------------------------------
aviso del profe: 

.env con glitch 
no sabe si va a tomar el .env del archivo, o hay que configurarlo. 

administradores:  usar un middleware para verificar que el usuario sea admin

log in: 
header/param, true o false
es admin, si o no?

crear un middleware que antes de llegar a nuestra ruta, definamos si es admin (true) o no (false)
true: next 
false: devolver un error

recomienda crear interfases para que el mismo editor se queje. 

probar con postman o frontend sencilla.
no hace falta hacer frontend, no se recomienda.

si pueden usar typescript mejor. 

.
├── app.js
├── bin
│   └── www
├── package.json
├── public
│   ├── images
│   ├── javascripts
│   └── stylesheets
│       └── style.css
├── routes
│   ├── index.js
│   └── users.js
└── views
    ├── error.pug
    ├── index.pug
    └── layout.pug

-----------------------------------

test-project/
   node_modules/

   config/
      db.js                //Database connection and configuration
      credentials.js       //Passwords/API keys for external services used by your app

   models/                 //For mongoose schemas
      users.js
      things.js

   routes/                 //All routes for different entities in different files 
      users.js
      things.js

   app.js

   routes.js               //Require all routes in this and then require this file in app.js 
   
   package.json

   ------------------------------------------------------
   [
       {
           carritoId: 1,
           incluye: {
               objeto 1,
               objeto 2,
           },
       },

       {
           carritoId: 2,
           incluye: {
               objeto1,
               objeto2,
           },
       }
   ]

   ---------------------------------------

   crearCarrito () {
        if(this.carrito.length === 0) {

            const nuevoCarrito = {
                CarritoNumero_id:1
            }
            this.carrito.push(nuevoCarrito)
            return this.carrito

        }

        const ultimoId = this.carrito[this.carrito.length-1].CarritoNumero_id + 1

        const nuevoCarrito = {
            CarritoNumero_id: ultimoId        
        }
        this.carrito.push(nuevoCarrito)
        return this.carrito
    }

    ------------------------------------

    app.get('*', function(req, res){
        res.sendFile(__dirname+'/public/error.html');
    });

    En el caso de requerir una ruta no implementada en el servidor, 
    este debe contestar un objeto de error: 
    
    ej { error : -2, descripcion: ruta 'x' método 'y' no implementada}

----------------------------------------------------

Por ahora para la primera entrega como que no está definido el funcionamiento para esa variable
Pero podriamos hacer algo como, que en cada peticion que se haga, 
por query params, se envie una variable para saber si es admin o no (claro es hardcodeada)

por ejemplo cuando hagamos el post de un producto:
localhost:4000/api/productos?isAdmin=true

y te puedes hacer un middleware para poner entre cada ruta que consulte 
si por req.query viene isAdmin, y si es true, pones el next() paraq ue 
siga su camino, y si es false no. 

Claro dependiendo de lo solicitado en la consigna para cada ruta

///middleware - login///

1 - dar acceso a una URL 

    const middleware = {

        isloggin: function (req,res,next) {

            if (req.user) return next() → si es user le damos acceso con next.
            res.redirect("/") → sino, lo redireccionamos a otro lado. 
        }
    }

    module.exports = middleware;

2 - lo importamos a las rutas. 

    const isloggin = require("./middleware").isloggin, 

    router.route("/admin/")
        .get(isloggin, function (req, res) {
            .....
        })

3- si quieren poner el middleware a todas las rutas: 
    router.use (isloggin)